/*! @ryanmorr/reduce v0.1.2 | https://github.com/ryanmorr/reduce */
function t(t){return Array.isArray(t)?t:function(t){return"function"==typeof t[Symbol.iterator]}(t)||function(t){const n=null!=t&&t.length;return"number"==typeof n&&n>=0&&n%1==0}(t)?Array.from(t):function(t){if(!t||"object"!=typeof t)return!1;const n=Object.getPrototypeOf(t);return null===n||n===Object.getPrototypeOf({})}(t)?Object.entries(t):void 0}function n(n,r,e){const o=t(n);for(let t=0,u=o.length;t<u;t++)r=e(r,o[t],t,n);return r}function r(n,r,e){const o=t(n);for(let t=o.length-1;t>=0;--t)r=e(r,o[t],t,n);return r}export{n as reduce,r as reduceRight};
